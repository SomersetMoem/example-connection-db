package utils;

import java.sql.*;

public class DebugHelper {
    public static void main(String[] args) {
        System.out.println("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n");

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä–∞–π–≤–µ—Ä–∞
        try {
            Class.forName("org.postgresql.Driver");
            System.out.println("‚úÖ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω");
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –ù–ï –ù–ê–ô–î–ï–ù!");
            System.err.println("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ pom.xml –µ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:");
            System.err.println("   <dependency>");
            System.err.println("       <groupId>org.postgresql</groupId>");
            System.err.println("       <artifactId>postgresql</artifactId>");
            System.err.println("       <version>42.7.1</version>");
            System.err.println("   </dependency>");
            return;
        }

        // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã
        System.out.println("\nüöó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JDBC –¥—Ä–∞–π–≤–µ—Ä—ã:");
        java.util.Enumeration<Driver> drivers = DriverManager.getDrivers();
        boolean hasPostgresDriver = false;
        while (drivers.hasMoreElements()) {
            Driver driver = drivers.nextElement();
            String driverName = driver.getClass().getName();
            System.out.println("   - " + driverName);
            if (driverName.contains("postgresql")) {
                hasPostgresDriver = true;
                System.out.println("     ‚úÖ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω!");
            }
        }

        if (!hasPostgresDriver) {
            System.err.println("‚ùå PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DriverManager!");
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
        String[] testUrls = {
                "jdbc:postgresql://localhost:5432/testdb",
                "jdbc:postgresql://127.0.0.1:5432/testdb",
                "jdbc:postgresql://localhost:5432/postgres",
                "jdbc:postgresql://127.0.0.1:5432/postgres"
        };

        String username = "testuser";
        String password = "testpass";

        System.out.println("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:");

        for (String url : testUrls) {
            System.out.println("\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º: " + url);

            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                System.out.println("   ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!");

                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT current_database(), current_user")) {

                    if (rs.next()) {
                        System.out.println("   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: " + rs.getString(1));
                        System.out.println("   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + rs.getString(2));
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT tablename FROM pg_tables WHERE schemaname = 'public'")) {

                    System.out.println("   üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ:");
                    boolean hasTables = false;
                    while (rs.next()) {
                        System.out.println("      - " + rs.getString(1));
                        hasTables = true;
                    }
                    if (!hasTables) {
                        System.out.println("      (—Ç–∞–±–ª–∏—Ü –Ω–µ—Ç)");
                    }
                }

                return; // –ï—Å–ª–∏ –æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º

            } catch (SQLException e) {
                System.err.println("   ‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }

        System.err.println("\n‚ùå –í–°–ï –ü–û–ü–´–¢–ö–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ù–ï–£–°–ü–ï–®–ù–´!");

        // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
        System.out.println("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:");

        try (java.net.Socket socket = new java.net.Socket()) {
            socket.connect(new java.net.InetSocketAddress("localhost", 5432), 5000);
            System.out.println("   ‚úÖ –ü–æ—Ä—Ç 5432 –Ω–∞ localhost –¥–æ—Å—Ç—É–ø–µ–Ω");
        } catch (Exception e) {
            System.err.println("   ‚ùå –ü–æ—Ä—Ç 5432 –Ω–∞ localhost –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + e.getMessage());
        }

        try (java.net.Socket socket = new java.net.Socket()) {
            socket.connect(new java.net.InetSocketAddress("127.0.0.1", 5432), 5000);
            System.out.println("   ‚úÖ –ü–æ—Ä—Ç 5432 –Ω–∞ 127.0.0.1 –¥–æ—Å—Ç—É–ø–µ–Ω");
        } catch (Exception e) {
            System.err.println("   ‚ùå –ü–æ—Ä—Ç 5432 –Ω–∞ 127.0.0.1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + e.getMessage());
        }

        // 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Java –∏ classpath
        System.out.println("\n‚òï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Java:");
        System.out.println("   Java –≤–µ—Ä—Å–∏—è: " + System.getProperty("java.version"));
        System.out.println("   Java home: " + System.getProperty("java.home"));

        String classpath = System.getProperty("java.class.path");
        System.out.println("\nüìÅ Classpath —Å–æ–¥–µ—Ä–∂–∏—Ç PostgreSQL JAR:");
        boolean foundPostgresJar = classpath.toLowerCase().contains("postgresql");
        if (foundPostgresJar) {
            System.out.println("   ‚úÖ PostgreSQL JAR –Ω–∞–π–¥–µ–Ω –≤ classpath");
        } else {
            System.out.println("   ‚ùå PostgreSQL JAR –ù–ï –ù–ê–ô–î–ï–ù –≤ classpath!");
            System.out.println("   Classpath: " + classpath);
        }
    }
}
