package db;

import org.junit.jupiter.api.*;
import utils.DatabaseHelper;

import java.util.List;
import java.util.Map;

public class DatabaseTests {
    private DatabaseHelper dbHelper;

    @BeforeEach
    public void setUp() {
        System.out.println("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î");
        dbHelper = new DatabaseHelper();
    }

    @AfterEach
    public void tearDown() {
        if (dbHelper != null) {
            dbHelper.closeConnection();
        }
        System.out.println("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n");
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    public void testDatabaseConnection() {
        System.out.println("üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î");

        boolean isConnected = dbHelper.isConnectionValid();
        Assertions.assertTrue(isConnected, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º");

        System.out.println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SELECT –∑–∞–ø—Ä–æ—Å–∞")
    public void testSelectQuery() {
        System.out.println("üß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞");

        String query = "SELECT id, name, email FROM users ORDER BY id";
        List<Map<String, Object>> results = dbHelper.executeSelectQuery(query);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        Assertions.assertFalse(results.isEmpty(), "–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        Map<String, Object> firstUser = results.get(0);
        Assertions.assertTrue(firstUser.containsKey("id"), "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'id'");
        Assertions.assertTrue(firstUser.containsKey("name"), "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'name'");
        Assertions.assertTrue(firstUser.containsKey("email"), "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'email'");

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        System.out.println("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:");
        for (Map<String, Object> user : results) {
            System.out.println("   ID: " + user.get("id") +
                    ", Name: " + user.get("name") +
                    ", Email: " + user.get("email"));
        }

        System.out.println("‚úÖ SELECT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ")
    public void testRecordCount() {
        System.out.println("üß™ –¢–µ—Å—Ç: –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π");

        int userCount = dbHelper.getRecordCount("users");
        Assertions.assertTrue(userCount > 0, "–í —Ç–∞–±–ª–∏—Ü–µ users –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∏");

        System.out.println("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: " + userCount);
        System.out.println("‚úÖ –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
}